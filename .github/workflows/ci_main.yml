name: qlx-hfp-ci-main
on:
  push:
    branches: ["**"]
  workflow_dispatch: {}

jobs:
  test-and-sts:
    runs-on: ubuntu-latest
    env:
      ARGON2_TIME_COST: "2"
      ARGON2_MEMORY_KIB: "65536"
      ARGON2_PARALLELISM: "1"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
      - name: Install deps
        run: python -m pip install -r requirements.txt
      - name: Unit tests
        run: make test
      - name: STS sha512
        run: |
          mkdir -p artifacts
          python src/qlx_sts_min.py --n-bits 200000 --whiten sha512 --json-out artifacts/sts_sha512.json
      - name: STS vn
        run: python src/qlx_sts_min.py --n-bits 200000 --whiten vn --json-out artifacts/sts_vn.json
      - name: Guard min_p (>= 0.012)
        run: |
          python - << "PY"
import json, sys
ok=True
for p in ("artifacts/sts_sha512.json","artifacts/sts_vn.json"):
    r=json.load(open(p))
    ok &= r["summary"]["all_pass"] and r["summary"]["min_p"]>=0.012
sys.exit(0 if ok else 2)
PY
      - name: Run summary
        run: python scripts/sts_summarize.py
      - name: Upload STS reports
        uses: actions/upload-artifact@v4
        with:
          name: sts-reports
          path: |
            artifacts/sts_sha512.json
            artifacts/sts_vn.json
      - name: Upload STS summary
        uses: actions/upload-artifact@v4
        with:
          name: sts-summary
          path: |
            artifacts/sts_summary.json
            artifacts/sts_summary.html

  envelope-verify:
    runs-on: ubuntu-latest
    needs: test-and-sts
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
      - name: Install deps
        run: python -m pip install -r requirements.txt
      - name: Generate Ed25519 keypair
        shell: bash
        run: |
          python - <<PYK > edk.env
from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey
from cryptography.hazmat.primitives import serialization
priv=Ed25519PrivateKey.generate()
print("ED25519_PRIV_HEX="+priv.private_bytes(encoding=serialization.Encoding.Raw,format=serialization.PrivateFormat.Raw,encryption_algorithm=serialization.NoEncryption()).hex())
print("ED25519_PUB_HEX="+priv.public_key().public_bytes(encoding=serialization.Encoding.Raw,format=serialization.PublicFormat.Raw).hex())
PYK
          cat edk.env >> "$GITHUB_ENV"
      - name: Build Ed25519-signed envelope
        run: python scripts/export_payloads.py --seed "qlx-demo-seed-phi369" --sig-alg ed25519 --ed25519-priv-hex "$ED25519_PRIV_HEX"
      - name: Validate envelope (schema + Ed25519 verify)
        run: python scripts/validate_envelope.py artifacts/photonic_env_signed.json --ed25519-pub-hex "$ED25519_PUB_HEX"
      - name: Upload envelope and validation
        uses: actions/upload-artifact@v4
        with:
          name: envelope-verify
          path: |
            artifacts/photonic_env_signed.json
            artifacts/env_validation.json
